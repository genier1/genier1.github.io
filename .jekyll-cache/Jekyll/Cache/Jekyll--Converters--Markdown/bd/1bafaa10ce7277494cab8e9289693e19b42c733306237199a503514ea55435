I"F<h1 id="자료구조---hash-table">자료구조 - Hash Table</h1>

<h2 id="hash-table이란">Hash Table이란</h2>

<ul>
  <li>키와 밸류를 저장하는 데이터 구조</li>
  <li>Key를 통해 바로 데이터를 받아올 수 있으므로, 속도가 획기적으로 빨라짐
    <ul>
      <li>대부분의 연산이 분할 상환 분석에 따른 시간 복잡도가 O(1)이다.</li>
      <li>최악의 경우(충돌이 모두 발생하는 경우)에는 O(n)이다.</li>
    </ul>
  </li>
  <li>보통 배열로 미리 Hash Table 사이즈만큼 생성 후에 사용 (공간과 탐색 시간을 맞바꾸는 기법)</li>
  <li>파이썬에서는 딕셔너리 타입을 사용하면 된다.</li>
  <li>주요 용도
    <ul>
      <li>검색이 많이 필요한 경우</li>
      <li>저장, 삭제, 읽기가 빈번한 경우</li>
      <li>캐쉬 구현시</li>
    </ul>
  </li>
</ul>

<h2 id="용어-설명">용어 설명</h2>

<ul>
  <li>해시(Hash)</li>
  <li></li>
</ul>

<h2 id="hash-table의-장단점">Hash Table의 장단점</h2>

<h2 id="충돌collision">충돌(Collision)</h2>

<ol>
  <li>다른 내용의 데이터가 같은 키를 갖는 경우 이를 해시 충돌이라고 한다.</li>
  <li>충돌은 생각보다 쉽게 일어난다.
    <ol>
      <li>생일 문제 - 23명만 모여도 생일이 겹칠 확률이 50%를 넘는다.</li>
    </ol>
  </li>
  <li>Open Hashing과 Close Hashing 기법이 있다.</li>
</ol>

<h3 id="open-hashing">Open Hashing</h3>

<ul>
  <li>Chaining 기법이라고 부르기도 한다.</li>
  <li>충돌이 발생할 경우, 링크드 리스트로 연결하는 방식이다.</li>
</ul>

<h3 id="close-hashing">Close Hashing</h3>

<ul>
  <li>Linear Probing 또는 Open Addressing이라고 부르기도 한다.</li>
  <li>충돌이 발생할 경우 해당 해쉬 값의 다음 index부터 빈 공간을 탐색한다.</li>
  <li>전체 슬롯의 개수 이상 저장할 수 없으며, 이 경우 공간을 확장해주어야 한다.</li>
  <li>해시테이블에 저장되는 데이터들이 고르게 분포되지 않고 뭉치는 현상이 발생하는 문제가 있다.(클러스터링)</li>
</ul>

<h2 id="hash-table-구현하기">Hash Table 구현하기</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">HashTable</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">table_size</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">table_size</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">hash_table</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">table_size</span><span class="p">)]</span>
    
  
</code></pre></div></div>

:ET