I"RS<h1 id="linked-list">Linked List</h1>

<h2 id="linked-list란">Linked List란</h2>

<ul>
  <li>배열과 함께 가장 기본이 되는 대표적인 선형 자료구조이며 다양한 추상 자료형(ADT) 구현의 기반이 된다.</li>
  <li>떨어진 곳의 데이터를 화살표로 연결하여 관리하는 데이터 구조</li>
  <li>탐색에는 O(N)이 소요된다.</li>
  <li>파이썬에서는 리스트를 통해 링크드 리스트를 구현</li>
</ul>

<h2 id="linked-list의-장단점">Linked List의 장단점</h2>

<h3 id="장점">장점</h3>

<ul>
  <li>미리 데이터 공간을 할당하지 않아도 된다.</li>
  <li>배열에 비해 데이터의 추가/삽입 및 삭제가 쉽다.</li>
</ul>

<h3 id="단점">단점</h3>

<ul>
  <li>연결을 위한 별도의 공간이 필요하므로, 저장공간 효율이 높지 않다.</li>
  <li>연결 정보를 찾는 시간이 필요하므로 접근 속도가 느리다.</li>
</ul>

<h2 id="linked-list의-주요-용어">Linked List의 주요 용어</h2>

<ul>
  <li>노드(Node) - 데이터 저장 단위 (데이터값, 포인터) 로 구성</li>
  <li>포인터(Pointer) - 각 노드 안에서, 다음이나 이전의 노드와의 연결 정보를 가지고 있는 공간</li>
</ul>

<h2 id="singly-linked-list-구현">Singly Linked List 구현</h2>

<p><img src="https://user-images.githubusercontent.com/19471818/110234672-17a94a00-7f6f-11eb-8081-bb30270c7d7f.png" alt="Singly-linked-list" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>
    
<span class="k">class</span> <span class="nc">singly_linked_list</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>
 
    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="c1"># 노드가 없을 경우, head에 새 노드를 저장
</span>        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">==</span> <span class="s">''</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="c1"># 노드가 존재하는 경우에는 head에 새 노드를 저장한 후, 기존 노드를 새 노드의 next로 저장
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="c1"># 노드가 없을 경우
</span>        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">==</span> <span class="s">'None'</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"삭제할 노드가 없습니다."</span><span class="p">)</span>
            <span class="k">return</span> 
            <span class="c1"># self.head를 삭제할 경우
</span>        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">data</span> <span class="o">==</span> <span class="n">data</span><span class="p">:</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">del</span> <span class="n">tmp</span>
        <span class="c1"># self.head가 아닌 중간 노드를 삭제할 경우 
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">data</span> <span class="o">==</span> <span class="n">data</span><span class="p">:</span>
                <span class="n">tmp</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span>
                <span class="n">node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span>
                <span class="k">del</span> <span class="n">tmp</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span>
       
    <span class="c1"># 리스트에 data가 있는지 확인하는 함수    
</span>    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span> 
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
        <span class="k">while</span> <span class="n">node</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">data</span> <span class="o">==</span> <span class="n">data</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span>
                <span class="k">return</span> <span class="bp">False</span>

    <span class="k">def</span> <span class="nf">print_list</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
        <span class="k">while</span> <span class="n">node</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
            <span class="c1"># 다음 노드로 이동
</span>            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span> 
</code></pre></div></div>

<h2 id="doubly-linked-list-구현">Doubly Linked List 구현</h2>

<p><img src="https://user-images.githubusercontent.com/19471818/110234704-4cb59c80-7f6f-11eb-8c39-55bf34e57311.png" alt="Doubly-linked-list" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">prev</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">prev</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>
    
<span class="k">class</span> <span class="nc">doubly_linked_list</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
 
    <span class="k">def</span> <span class="nf">insert_before</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">before_data</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
            <span class="k">return</span> <span class="bp">True</span>
            
        <span class="k">else</span><span class="p">:</span>
            <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span>
            <span class="k">while</span> <span class="n">node</span><span class="p">.</span><span class="n">data</span> <span class="o">!=</span> <span class="n">before_data</span><span class="p">:</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">prev</span>
                <span class="k">if</span> <span class="n">node</span><span class="o">==</span><span class="bp">None</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>

            <span class="n">prev_node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">prev</span>
            <span class="n">new_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">prev</span><span class="o">=</span><span class="n">prev_node</span><span class="p">,</span><span class="nb">next</span><span class="o">=</span><span class="n">node</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">prev_node</span><span class="p">:</span>
                <span class="n">prev_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">new_node</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">new_node</span>
            <span class="n">node</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">new_node</span>
            <span class="k">return</span> <span class="bp">True</span>
            
            
    <span class="c1"># 노드 데이터가 data인 노드 뒤에 데이터 추가
</span>    <span class="k">def</span> <span class="nf">insert_after</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">after_data</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
            <span class="k">return</span> <span class="bp">True</span> 
        <span class="k">else</span><span class="p">:</span>
            <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
            <span class="k">while</span> <span class="n">node</span><span class="p">.</span><span class="n">data</span> <span class="o">!=</span> <span class="n">after_data</span><span class="p">:</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span>
                <span class="k">if</span> <span class="n">node</span><span class="o">==</span><span class="bp">None</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
            <span class="n">next_node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span>
            <span class="n">new_node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">prev</span><span class="o">=</span><span class="n">node</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="n">next_node</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">next_node</span><span class="p">:</span>
                <span class="n">next_node</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">new_node</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">new_node</span>
            <span class="n">node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">new_node</span>
            
    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
      	<span class="c1"># 노드가 없을 경우
</span>        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"삭제할 노드가 없습니다."</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">False</span> 
        
        <span class="c1"># data가 head에 있을 경우
</span>        <span class="k">elif</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">data</span> <span class="o">==</span> <span class="n">data</span><span class="p">:</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> 
            <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">del</span> <span class="n">tmp</span> 
            
        <span class="c1"># data가 tail에 있을 경우
</span>        <span class="k">elif</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="n">data</span> <span class="o">==</span> <span class="n">data</span><span class="p">:</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="n">prev</span> 
            <span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">del</span> <span class="n">tmp</span>
        
        <span class="k">else</span><span class="p">:</span>
            <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
            <span class="k">while</span> <span class="n">node</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">data</span> <span class="o">==</span> <span class="n">data</span><span class="p">:</span>
                    <span class="n">tmp</span> <span class="o">=</span> <span class="n">node</span> 
                    <span class="n">node</span><span class="p">.</span><span class="n">prev</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span> 
                    <span class="n">node</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">prev</span> 
                    <span class="k">del</span> <span class="n">tmp</span> 
                <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span>

    
    <span class="k">def</span> <span class="nf">print_list</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
        <span class="k">while</span> <span class="n">node</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<h2 id="출처">출처</h2>

<ul>
  <li><a href="https://www.fun-coding.org/DS&amp;AL1-4.html">잔재미코딩 - 링크드리스트</a></li>
  <li><a href="https://wayhome25.github.io/cs/2017/04/18/cs-19/">초보몽키의 개발공부로그</a></li>
  <li><a href="https://daimhada.tistory.com/72">daim’s blog</a></li>
  <li><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9791189909178">파이썬 알고리즘 인터뷰</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Linked_list">Wikipedia - Linked list</a></li>
</ul>

:ET